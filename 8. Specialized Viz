# Pie Charts
df_continents = df_can.groupby('Continent', axis=0).sum() #prep data
colors_list = ['gold', '...', 'pink']
explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge
df_continents['Total'].plot(kind='pie',
        figsize=(15, 6),
        autopct='%1.1f%%', #labels the wedges with their numeric value; fmt%pct for string format
        startangle=90,    
        shadow=True,       
        labels=None,         # turn off labels on pie chart
        pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct 
        colors=colors_list,  # add custom colors
        explode=explode_list # 'explode' lowest 3 continents
        )
plt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) #scale by 12%
plt.axis('equal') #sets the pie chart to look like a circle.
plt.legend(labels=df_continents.index, loc='upper left') 
plt.show()

# Box Plots
df_japan = df_can.loc[['Japan'], years].transpose() #extra brackets to get a dataframe
df_japan.plot(kind='box', figsize=(8, 6)) #color for color, vert=False for horizontal view
plt.title('Box plot of Japanese Immigrants from 1980 - 2013')
plt.ylabel('Number of Immigrants')
plt.show()

# Subplots
fig = plt.figure() # create figure
ax0 = fig.add_subplot(1, 2, 1) # add subplot 1 (1 row, 2 columns, first plot)
ax1 = fig.add_subplot(1, 2, 2) # add subplot 2 (1 row, 2 columns, second plot)
# Subplot 1: Box plot
df_CI.plot(kind='box', color='blue', vert=False, figsize=(20, 6), ax=ax0) # add to subplot 1
ax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')
ax0.set_xlabel('Number of Immigrants')
ax0.set_ylabel('Countries')
# Subplot 2: Line plot
df_CI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2
ax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')
ax1.set_ylabel('Number of Immigrants')
ax1.set_xlabel('Years')
plt.show()

# Scatter Plots
df_tot = pd.DataFrame(df_can[years].sum(axis=0)) #get total population per year
df_tot.index = map(int, df_tot.index) #for regression change years to int
df_tot.reset_index(inplace = True) #reset the index
# Fit regression line
x = df_tot['year']
y = df_tot['total']
fit = np.polyfit(x, y, deg=1)
# Print plot
df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')
plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')
plt.plot(x, fit[0] * x + fit[1], color='red') # x is the Years
plt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))
plt.show()
'No. Immigrants = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1]) # just a comment

# Bubble Plots
df_can_t = df_can[years].transpose() #transposed dataframe
df_can_t.index = map(int, df_can_t.index) #cast the Years (the index) to type int
df_can_t.index.name = 'Year' #automatically becomes column name when index is reset
df_can_t.reset_index(inplace=True) #reset index to bring the Year in as a column
# Create the normalized weights
norm_brazil = (df_can_t['Brazil'] - df_can_t['Brazil'].min()) / (df_can_t['Brazil'].max() - df_can_t['Brazil'].min())
norm_argentina = (df_can_t['Argentina'] - df_can_t['Argentina'].min()) / (df_can_t['Argentina'].max() - df_can_t['Argentina'].min())
# Plot the data
ax0 = df_can_t.plot(kind='scatter',
      x='Year',
      y='Brazil',
      figsize=(14, 8),
      alpha=0.5,
      color='green',
      s=norm_brazil * 2000 + 10, #pass in weights; 2000 to scale up on the graph
      xlim=(1975, 2015))
ax1 = df_can_t.plot(kind='scatter',
      x='Year',
      y='Argentina',
      alpha=0.5,
      color="blue",
      s=norm_argentina * 2000 + 10, #10 to compensate for the min value
      ax = ax0)
ax0.set_ylabel('Number of Immigrants')
ax0.set_title('Immigration from Brazil and Argentina from 1980 - 2013')
ax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')
