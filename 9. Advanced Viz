# ADVANCED PLOTS

# Waffle Charts
import matplotlib.patches as mpatches # needed for waffle Charts
df_dsn = df_can.loc[['Denmark', 'Norway', 'Sweden'], :] #create a new dataframe
# compute the proportion of each category with respect to the total
total_values = sum(df_dsn['Total'])
category_proportions = [(float(value) / total_values) for value in df_dsn['Total']]
# print out proportions
for i, proportion in enumerate(category_proportions):
    print (df_dsn.index.values[i] + ': ' + str(proportion))
# Define the overall size of the waffle chart
width = 40 # width of chart
height = 10 # height of chart
total_num_tiles = width * height # total number of tiles
print ('Total number of tiles is ', total_num_tiles)
# Using the proportion of each category determe its respective number of tiles
tiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]
for i, tiles in enumerate(tiles_per_category):
    print (df_dsn.index.values[i] + ': ' + str(tiles))
# Creating the matrix
waffle_chart = np.zeros((height, width)) #initialize the waffle chart as an empty matrix
category_index = 0 # define indices to loop through waffle chart
tile_index = 0
#populate the waffle chart
for col in range(width):
    for row in range(height):
        tile_index += 1
        # if the number of tiles populated for the current category is equal to its corresponding allocated tiles...
        if tile_index > sum(tiles_per_category[0:category_index]):
            # ...proceed to the next category
            category_index += 1       
        # set the class value to an integer, which increases with class
        waffle_chart[row, col] = category_index
print ('Waffle chart populated!')
waffle_chart #shows the matrix, numbers no pictures yet
# Map the waffle chart matrix into a visual
fig = plt.figure() #instantiate a new figure object
colormap = plt.cm.coolwarm #use matshow to display the waffle chart
plt.matshow(waffle_chart, cmap=colormap)
plt.colorbar()
ax = plt.gca() #get the axis
ax.set_xticks(np.arange(-.5, (width), 1), minor=True) #set minor ticks
ax.set_yticks(np.arange(-.5, (height), 1), minor=True)
ax.grid(which='minor', color='w', linestyle='-', linewidth=2) #add gridlines based on minor ticks
plt.xticks([])
plt.yticks([])
# compute cumulative sum of individual categories to match color schemes between chart and legend
values_cumsum = np.cumsum(df_dsn['Total'])
total_values = values_cumsum[len(values_cumsum) - 1]
# Create legend
legend_handles = []
for i, category in enumerate(df_dsn.index.values):
    label_str = category + ' (' + str(df_dsn['Total'][i]) + ')'
    color_val = colormap(float(values_cumsum[i])/total_values)
    legend_handles.append(mpatches.Patch(color=color_val, label=label_str))
plt.legend(handles=legend_handles, #add legend to chart
           loc='lower center', 
           ncol=len(df_dsn.index.values),
           bbox_to_anchor=(0., -0.2, 0.95, .1)
          )

# Waffle Chart as one function
def create_waffle_chart(categories, values, height, width, colormap, value_sign=''):
    # compute the proportion of each category with respect to the total
    total_values = sum(values)
    category_proportions = [(float(value) / total_values) for value in values]
    # compute the total number of tiles
    total_num_tiles = width * height # total number of tiles
    print ('Total number of tiles is', total_num_tiles)
        # compute the number of tiles for each catagory
    tiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]
    # print out number of tiles per category
    for i, tiles in enumerate(tiles_per_category):
        print (df_dsn.index.values[i] + ': ' + str(tiles))
    # initialize the waffle chart as an empty matrix
    waffle_chart = np.zeros((height, width))
    # define indices to loop through waffle chart
    category_index = 0
    tile_index = 0
    # populate the waffle chart
    for col in range(width):
        for row in range(height):
            tile_index += 1
            # if the number of tiles populated for the current category 
            # is equal to its corresponding allocated tiles...
            if tile_index > sum(tiles_per_category[0:category_index]):
                # ...proceed to the next category
                category_index += 1  
            # set the class value to an integer, which increases with class
            waffle_chart[row, col] = category_index
    # instantiate a new figure object
    fig = plt.figure()
    # use matshow to display the waffle chart
    colormap = plt.cm.coolwarm
    plt.matshow(waffle_chart, cmap=colormap)
    plt.colorbar()
    # get the axis
    ax = plt.gca()
    # set minor ticks
    ax.set_xticks(np.arange(-.5, (width), 1), minor=True)
    ax.set_yticks(np.arange(-.5, (height), 1), minor=True)
    # add dridlines based on minor ticks
    ax.grid(which='minor', color='w', linestyle='-', linewidth=2)
    plt.xticks([])
    plt.yticks([])
    # compute cumulative sum of individual categories to match color schemes between chart and legend
    values_cumsum = np.cumsum(values)
    total_values = values_cumsum[len(values_cumsum) - 1]
    # create legend
    legend_handles = []
    for i, category in enumerate(categories):
        if value_sign == '%':
            label_str = category + ' (' + str(values[i]) + value_sign + ')'
        else:
            label_str = category + ' (' + value_sign + str(values[i]) + ')'
            
        color_val = colormap(float(values_cumsum[i])/total_values)
        legend_handles.append(mpatches.Patch(color=color_val, label=label_str))
    # add legend to chart
    plt.legend(
        handles=legend_handles,
        loc='lower center', 
        ncol=len(categories),
        bbox_to_anchor=(0., -0.2, 0.95, .1)
    )
width = 40 # width of chart
height = 10 # height of chart
categories = df_dsn.index.values # categories
values = df_dsn['Total'] # correponding values of categories
colormap = plt.cm.coolwarm # color map class
create_waffle_chart(categories, values, height, width, colormap)

# Word Clouds
from PIL import Image # converting images into arrays
#!conda install -c conda-forge wordcloud==1.4.1 --yes #install wordcloud
from wordcloud import WordCloud, STOPWORDS #import package and its set of stopwords
alice_novel = open('alice_novel.txt', 'r').read()
stopwords = set(STOPWORDS) #use function set to remove any redundant stopwords
alice_wc = WordCloud( #instantiate a word cloud object
    background_color='white',
    max_words=2000,
    stopwords=stopwords
)
alice_wc.generate(alice_novel) #generate the word cloud
plt.imshow(alice_wc, interpolation='bilinear') #display the word cloud
plt.axis('off')
plt.show()
# Resize the cloud
fig = plt.figure()
fig.set_figwidth(14) #set width
fig.set_figheight(18) #set height
plt.imshow(alice_wc, interpolation='bilinear')
plt.axis('off')
plt.show()
# Add stopwords and re-generate the cloud
stopwords.add('said') #add the words said to stopwords
alice_wc.generate(alice_novel) #re-generate the word cloud
fig = plt.figure() # display the cloud
fig.set_figwidth(14) #set width
fig.set_figheight(18) #set height
plt.imshow(alice_wc, interpolation='bilinear')
plt.axis('off')
plt.show()
# Superimposing the words onto a mask/picture
alice_mask = np.array(Image.open('alice_mask.png')) #save mask to alice_mask
# Look at how the mask looks like
fig = plt.figure()
fig.set_figwidth(14) # set width
fig.set_figheight(18) # set height
plt.imshow(alice_mask, cmap=plt.cm.gray, interpolation='bilinear')
plt.axis('off')
plt.show()
# Shaping the word cloud according to the mask
alice_wc = WordCloud(background_color='white', max_words=2000, mask=alice_mask, stopwords=stopwords) #instantiate a word cloud object
alice_wc.generate(alice_novel) #generate the word cloud
fig = plt.figure() #display the word cloud
fig.set_figwidth(14) # set width
fig.set_figheight(18) # set height
plt.imshow(alice_wc, interpolation='bilinear')
plt.axis('off')
plt.show()

# Seaborn library
#!conda install -c anaconda seaborn --yes #install if required
import seaborn as sns #import library
df_tot = pd.DataFrame(df_can[years].sum(axis=0)) #get the total population per year
df_tot.index = map(float, df_tot.index) #change the years to type float (useful for regression later on)
df_tot.reset_index(inplace=True) #reset the index to put in back in as a column in the df_tot dataframe
df_tot.columns = ['year', 'total'] #rename columns
# Generate the plot
plt.figure(figsize=(15, 10)) #graph size
sns.set(font_scale=1.5) #font size
sns.set_style('whitegrid') #change background; 'ticks' for white
ax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200}) #200 for markers size
ax.set(xlabel='Year', ylabel='Total Immigration')
ax.set_title('Total Immigration to Canada from 1980 - 2013')

# MAPS WITH FOLIUM

# Basic maps
#!conda install -c conda-forge folium=0.5.0 --yes #if required
import folium
world_map = folium.Map(location=[56.130, -106.35], zoom_start=4) #location Canada
world_map #display world map, names in local language
# Stamen Toner Maps - high-contrast B+W
world_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles='Stamen Toner')
# Stamen Terrain Maps
world_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles='Stamen Terrain')
# Mapbox Bright Maps - low zoom no borders, names in EN
world_map = folium.Map(tiles='Mapbox Bright')

# Map with Markers
df_incidents = pd.read_csv('https://...2016_.csv')
latitude = 37.77 #place of interest location
longitude = -122.42
sanfran_map = folium.Map(location=[latitude, longitude], zoom_start=12) #create map
# loop through the 100 crimes and add each to the map
for lat, lng, label in zip(df_incidents.Y, df_incidents.X, df_incidents.Category):
    folium.features.CircleMarker(
        [lat, lng],
        radius=5, # size of circle markers
        color='yellow',
        fill=True,
        popup=label,
        fill_color='blue',
        fill_opacity=0.6
    ).add_to(sanfran_map)
sanfran_map

# Map with clasters of markers
from folium import plugins
# start with a clean copy of the map of San Francisco
sanfran_map = folium.Map(location = [latitude, longitude], zoom_start = 12)
# instantiate a mark cluster object for the incidents in the dataframe
incidents = plugins.MarkerCluster().add_to(sanfran_map)
# loop through the dataframe and add each data point to the mark cluster
for lat, lng, label, in zip(df_incidents.Y, df_incidents.X, df_incidents.Category):
    folium.Marker(
        location=[lat, lng],
        icon=None,
        popup=label,
    ).add_to(incidents)
sanfran_map #display map

# Choropleth Maps
world_geo = r'world_countries.json'
# create a numpy array of length 6 and has linear spacing from the minium total immigration to the maximum total immigration
threshold_scale = np.linspace(df_can['Total'].min(), df_can['Total'].max(), 6, dtype=int)
threshold_scale = threshold_scale.tolist() # change the numpy array to a list
threshold_scale[-1] = threshold_scale[-1] + 1 # make sure that the last value of the list is greater than the maximum immigration
# let Folium determine the scale.
world_map = folium.Map(location=[0, 0], zoom_start=2, tiles='Mapbox Bright')
world_map.choropleth(
    geo_data=world_geo,
    data=df_can,
    columns=['Country', 'Total'], #will be used to create the Choropleth map
    key_on='feature.properties.name', #key or variable of interest in the GeoJSON, countries in this case, it's case sensitive
    threshold_scale=threshold_scale,
    fill_color='YlOrRd', 
    fill_opacity=0.7, 
    line_opacity=0.2,
    legend_name='Immigration to Canada',
    reset=True)
world_map
